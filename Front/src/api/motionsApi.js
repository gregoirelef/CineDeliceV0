// importation de la fonction pour r√©cup√©rer le token

import { authFetch } from "./urlWrapperApiToken.js";
// import de la variable d'environnement VITE
const API_URL = import.meta.env.VITE_API_URL;

/**
 * Cr√©er une nouvelle oeuvre
 * @async
 * @function createMotions
 * @param {FormData} formData- les donn√©es du formulaire de cr√©ation
 * @param {string} token - token de l'utilisateur connect√©
 * @returns {Promise<Object>} - Un objet contenant les donn√©es de la nouvelle oeuvre cr√©√©e.
 * @throws {Error} - Si une erreur se produit lors de la cr√©ation de l'oeuvre.
 */

// fonction pour cr√©er un film
export async function createMotions(formData) {
  // Envoi de la requ√™te POST pour cr√©er une nouvelle oeuvre
  // on pr√©cise la m√©thode et le contenu du header avec le token
  const response = await authFetch(`${API_URL}/motions`, {
    method: "POST",
    body: formData,
    credentials: "include",
  });
  // on r√©cup√®re la r√©ponse de l'API (ici la cr√©ation d'un film)
  const dataMotion = await response.json();
  // V√©rification du succ√®s de la r√©ponse
  if (!response.ok) {
    const error = new Error(dataMotion?.details?.[0] || "Erreur lors de la cr√©ation de l'≈ìuvre");
    error.status = response.status; // üëà on attache le status
    throw error;
  }
  // on renvoie les donn√©es
  return dataMotion;
}

/**
 * R√©cup√®re toutes les cat√©gories de plat depuis l'API.
 * @async
 * @function getAllMotionsCategories
 * @returns {Promise<Array>} - Un tableau d'objets contenant les cat√©gories de plat.
 * @throws {Error} - Si une erreur se produit lors de la r√©cup√©ration des donn√©es.
 */

//r√©cup√©rer toutes les formats des oeuvres
export async function getAllMotionsFormats() {
  // on fait la demande API avec la route param√©tr√©e du back
  const response = await fetch(`${API_URL}/motionsFormats`);
  // V√©rification du succ√®s de la r√©ponse
  if (!response.ok) {
    // Gestion des erreurs HTTP
    throw new Error(`Erreur HTTP : ${response.status} ${response.statusText}`);
  }
  // on r√©cup√®re la r√©ponse de l'API (ici tous les formats des oeuvres)
  const dataMotionsFormats = await response.json();
  // on renvoie les donn√©es
  return dataMotionsFormats;
}

/**
 * R√©cup√®re tous les genres des oeuvres disponibles depuis l'API
 * @async
 * @function getAllMotionsGenres
 * @returns {Promise<Array>} - Un tableau d'objets contenant les genres des oeuvres
 * @throws {Error} - Si une erreur se produit lors de la r√©cup√©ration des donn√©es
 */
export async function getAllMotionsGenres() {
  // on met dans un try-catch pour r√©cup√©rer les erreurs
  try {
    // on fait la demande API avec la route param√©tr√©e du back
    const response = await fetch(`${API_URL}/motionsGenres`);
    // V√©rification du succ√®s de la r√©ponse
    if (!response.ok) {
      // Gestion des erreurs HTTP
      throw new Error(`Erreur HTTP : ${response.status} ${response.statusText}`);
    }
    // on r√©cup√®re la r√©ponse de l'API (ici tous les genres des oeuvres)
    const dataMotionsGenres = await response.json();
    // on renvoie les donn√©es
    return dataMotionsGenres;
    // si une erreur survient on l'indique.
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du genre des oeuvres:", error);
    return;
  }
}

/**
 * R√©cup√©re toutes les oeuvres depuis l'API.
 * @async
 * @function getAllMotions
 * @returns {Promise<Array>} - Un tableau d'objets contenant les oeuvres.
 * @throws {Error} - Si une erreur se produit lors de la r√©cup√©ration des donn√©es.
 */
export async function getAllMotions() {
  // on fait la demande API avec la route param√©tr√©e du back
  const response = await fetch(`${API_URL}/motions`);
  // V√©rification du succ√®s de la r√©ponse
  if (!response.ok) {
    //  Gestion des erreurs HTTP
    throw new Error(`Erreur HTTP : ${response.status} ${response.statusText}`);
  }
  // on r√©cup√®re la r√©ponse de l'API (ici toutes les oeuvres)
  const dataMotions = await response.json();
  // on renvoie les donn√©es
  return dataMotions;
}

/**
 * R√©cup√®re tous les genres de film depuis l'API.
 * @async
 * @function getAllGenres
 * @returns {Promise<Array>} - Un tableau d'objets contenant les genres de film.
 * @throws {Error} - Si une erreur se produit lors de la r√©cup√©ration des donn√©es.
 */
export async function getAllGenres() {
  // on fait la demande API avec la route parrametr√© du back
  const response = await fetch(`${API_URL}/genres`);
  // V√©rification du succ√®s de la r√©ponse
  if (!response.ok) {
    // Gestion des erreurs HTTP
    throw new Error(`Erreur HTTP : ${response.status} ${response.statusText}`);
  }
  // on r√©cupere la r√©ponse de l'API (ici toutes les oeuvres)
  const dataGenres = await response.json();
  // on renvois les donn√©es
  return dataGenres;
}

/**
 * R√©cup√®re une oeuvre par son ID.
 * @param  id - L'identifiant de l'oeuvre' √† r√©cup√©rer.
 * @async
 * @function getMotionById
 * * @returns {Promise<Object>} - Un objet contenant les donn√©es de l'oeuvre.
  * @throws {Error} - Si une erreur se produit lors de la r√©cup√©ration des donn√©es.
 
 */
export async function getMotionById(id) {
  // on fait la demande API avec la route parram√©tr√©e du back et l'id de la recette
  const response = await fetch(`${API_URL}/motions/${id}`);
  // on r√©cup√®re la r√©ponse de l'API (ici le film cibl√©)
  const motion = await response.json();
  // on v√©rifie que l'on a une r√©ponse
  if (!response.ok) {
    throw new Error("Erreur lors de la r√©cup√©ration de la recette");
  }
  // on renvoie les donn√©es
  return motion;
}
